{"version":3,"sources":["Components/WCard.js","Components/Weather.js","Components/MCard.js","Components/OCard.js","Components/searchBar.js","App.js","reportWebVitals.js","index.js"],"names":["WCard","main","description","icon","className","src","alt","Weather","weather","map","data","MCard","temp","feels_like","temp_min","temp_max","pressure","humidity","OCard","sunrise","sunset","speed","Math","floor","moment","unix","format","SearchBar","searchQuery","setSearchQuery","style","width","background","border","padding","type","placeholder","value","onChange","e","target","toUpperCase","City","App","useState","setData","error","message","setError","loading","setLoading","useEffect","handleFetch","a","fetch","process","response","status","json","onClick","window","location","reload","preventDefault","name","wind","visibility","sys","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ddb84bd.chunk.js","sourcesContent":["\r\nconst WCard = ({ main, description, icon}) => {\r\n    return (\r\n  \r\n            <div className=\"weather-container\">\r\n                <h4>Expected Forecast of {main}</h4>\r\n                <div >\r\n                  <p className='desc'>\"{description}\"</p>\r\n                  <img src ={`http://openweathermap.org/img/w/${icon}.png`} alt=\"weather img\" />\r\n                </div>\r\n            </div>\r\n\r\n    );\r\n};\r\n\r\nexport default WCard;","import WCard from './WCard';\r\nimport React from 'react';\r\n\r\n\r\nconst Weather = ({weather}) => {\r\n\r\n return (\r\n     <div>\r\n     {weather\r\n          .map((data) => {\r\n             return <WCard {...data}/>;\r\n        })}\r\n      </div>\r\n );\r\n};\r\n\r\nexport default Weather;","const MCard = ({ temp, feels_like, temp_min, temp_max, pressure, humidity}) => {\r\n    return (\r\n  \r\n            <div>\r\n                <h3>Current Temperature {temp}째C </h3>\r\n                  <p> Feels Like {feels_like}째C </p>\r\n                  <p> Minimum Temperature {temp_min}째C </p> \r\n                  <p> Maximum Temperature {temp_max}째C </p> \r\n                  <p> Pressure {pressure}mb </p> \r\n                  <p> Humidity {humidity}% </p>\r\n            </div>\r\n\r\n    );\r\n};\r\n\r\nexport default MCard;","import React from \"react\";\r\nimport moment from \"moment\";\r\n\r\nconst OCard = ({ sunrise, sunset, speed}) => {\r\n    return (\r\n  \r\n            <div>\r\n                <h4>Wind Speed {Math.floor(speed*2.236937)}mph</h4>\r\n                <div className='suntimes'>\r\n                    <div className='sunbox'>\r\n                    <h2>Sunrise</h2> <p>{moment.unix(sunrise).format(\"dddd, MMMM Do YYYY, h:mm:ss a\")}</p>\r\n                    </div>\r\n                    <div className='sunbox'>\r\n                    <h2>Sunset</h2> <p>{moment.unix(sunset).format(\"dddd, MMMM Do YYYY, h:mm:ss a\")}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n    );\r\n};\r\n\r\nexport default OCard;","import React from 'react';\r\n\r\nconst SearchBar = ({ searchQuery, setSearchQuery}) => {\r\n  const BarStyling = {width:\"200px\",background:\"#F2F1F9\", border:\"none\", padding:\"10px\"};\r\n  return (\r\n    <div>\r\n    <input \r\n     style={BarStyling}\r\n     type = 'text'\r\n     placeholder={\"Search City\"}\r\n     value={searchQuery}\r\n     onChange={e => setSearchQuery(e.target.value.toUpperCase())}\r\n        />\r\n    </div>\r\n);\r\n};\r\n\r\nexport default SearchBar;\r\n\r\n\r\n","import './App.css';\r\nimport {useState, useEffect} from 'react';\r\nimport Weather from './Components/Weather';\r\nimport MCard from './Components/MCard';\r\nimport OCard from './Components/OCard';\r\nimport SearchBar from './Components/searchBar';\r\nlet City = 'London';\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState({ error: false, message: \"\" });\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchQuery, setSearchQuery] = useState([]);\r\n\r\n  useEffect(() => {\r\n    handleFetch();\r\n  }, []);\r\n\r\n\r\n  const handleFetch = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        `https://api.openweathermap.org/data/2.5/weather?q=${City}&units=metric&appid=${process.env.REACT_APP_API_KEY}`\r\n      );\r\n\r\n      if (response.status !== 200) {\r\n        throw new error(\"oops\");\r\n      }\r\n      const data = await response.json();\r\n      setData(data);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      setError({ error: true, message: error.message });\r\n    }\r\n  };\r\n\r\n  function updateInput (e) {\r\n    e.preventDefault();\r\n    setError(false);\r\n    setLoading(true);\r\n    City = searchQuery;\r\n    handleFetch()\r\n    };\r\n\r\n    function refresh () {\r\n       window.location.reload();\r\n    };\r\n\r\n  \r\n  if (error.error) {\r\n    return (\r\n      <div>\r\n        <h1>An error has occured: {error.message}</h1>\r\n        <button onClick={refresh}> Go Back </button>\r\n      </div>\r\n    );\r\n  } else if (loading) {\r\n    return <h1>loading...</h1>;\r\n  } else {\r\n    return (\r\n      <div className=\"container\">\r\n        <h2 className=\"main-title\">Local Weather Forecast</h2>\r\n        <div className=\"weather-search\">\r\n          <div className='searchbar'>\r\n          <SearchBar\r\n            searchQuery={searchQuery}\r\n            setSearchQuery={setSearchQuery}\r\n          />\r\n          <button className=\"update-city\" onClick={updateInput}>\r\n            Update City\r\n          </button>\r\n          </div> {/* Searchbar buttons */}\r\n        <button className=\"update-button\" onClick={handleFetch}>\r\n          Update Weather Forecast\r\n        </button>\r\n        <div className='line'></div>\r\n        </div> {/* Searchbar buttons */}\r\n        <div className=\"name_container\">\r\n          <div className='city_info'>\r\n            <h1>{data.name}</h1>\r\n            <MCard {...data.main} />\r\n          </div> {/* City & temp info */}\r\n          <div  className='weather'>\r\n            <Weather weather={data.weather} wind={data.wind} />\r\n            <h4>Avg Visibility {data.visibility / 1000}km </h4>\r\n            <OCard {...data.wind} {...data.sys} />\r\n          </div> {/* Forecast & other info */}\r\n        </div> {/* name_container */}\r\n      </div> \r\n    );\r\n  }\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}